@RestController
@RequestMapping("/sse")
@Slf4j
public class SseController {

    public static Map<String, SseEmitter> sseEmitters = new ConcurrentHashMap<>();

    // falling-people 횟수를 저장하는 맵
    public static Map<String, Integer> fallingPeopleCount = new ConcurrentHashMap<>();

    @GetMapping(value = "", consumes = MediaType.ALL_VALUE)
    public SseEmitter streamSseMvc(@RequestParam String userId) {
        log.info("userId = {}", userId);

        // 현재 클라이언트를 위한 SseEmitter 생성
        SseEmitter emitter = new SseEmitter(Long.MAX_VALUE);

        try {
            // 연결!!
            emitter.send(SseEmitter.event().name("connect"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        // userId를 key값으로 해서 SseEmitter를 저장
        sseEmitters.put(userId, emitter);

        // falling-people 횟수 초기화
        fallingPeopleCount.put(userId, 0);

        emitter.onCompletion(() -> {
            sseEmitters.remove(userId);
            fallingPeopleCount.remove(userId);
        });

        emitter.onTimeout(() -> {
            sseEmitters.remove(userId);
            fallingPeopleCount.remove(userId);
        });

        emitter.onError((e) -> {
            sseEmitters.remove(userId);
            fallingPeopleCount.remove(userId);
        });

        return emitter;
    }

    // falling-people 업데이트를 처리하는 메서드
    public static void updateFallingPeopleCount(String userId, int count) {
        fallingPeopleCount.put(userId, count);

        // 특정 조건을 만족하는 경우 팝업 전송
        if (count >= 8) {
            SseEmitter emitter = sseEmitters.get(userId);
            if (emitter != null) {
                try {
                    emitter.send(SseEmitter.event().name("showPopup"));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
